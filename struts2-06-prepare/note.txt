针对struts2-05-params 提出的问题的解决方案：使用PrepareInterceptor 和Preparable 接口

关于 PrepareInterceptor：
	若Action实现了 Preparable 接口，则struts2将尝试执行prepare[ActionMethodName]方法；
	如果不存在，则将尝试执行prepareDo[ActionMethodName]方法；
	如果都不存在，就都不执行。
	
	如果PrepareInterceptor 的 alwaysInvokePrepare属性为false， 则struts2将不会调用实现了Preparable接口的Action的prepare方法。
	
	[能解决struts2-05-params 的问题]：
		为每一个ActionMethod 准备 prepare[ActionMethodName]，而抛弃原来的prepare()方法。
		将PrepareInterceptor 的 alwaysInvokePrepare属性设为false，避免struts2框架再调用prepare方法。
	
	-----------------------源码解析------------------------
    public String doIntercept(ActionInvocation invocation) throws Exception {
    	//获取action实例
        Object action = invocation.getAction();

		//判断action是否实现了Preparable 接口
        if (action instanceof Preparable) {
            try {
                String[] prefixes;
				//根据当前拦截器的firstCallPrepareDo(默认为false)属性确定prefixes                
                if (firstCallPrepareDo) {
                    prefixes = new String[] {ALT_PREPARE_PREFIX, PREPARE_PREFIX};
                } else {
                    prefixes = new String[] {PREPARE_PREFIX, ALT_PREPARE_PREFIX};
                }
                //firstCallPrepareDo 若为false， 则prefixes为：prepare， prepareDo
                //调用前缀方法
                PrefixMethodInvocationUtil.invokePrefixMethod(invocation, prefixes);
            }
            catch (InvocationTargetException e) {
                Throwable cause = e.getCause();
                if (cause instanceof Exception) {
                    throw (Exception) cause;
                } else if(cause instanceof Error) {
                    throw (Error) cause;
                } else {
                    throw e;
                }
            }

			//根据当前拦截器的alwaysInvokePrepare(默认为true) 属性决定是否调用action的prepare方法。
            if (alwaysInvokePrepare) {
                ((Preparable) action).prepare();
            }
        }

        return invocation.invoke();
    }
    
    //PrefixMethodInvocationUtil.invokePrefixMethod(invocation, prefixes);前缀方法
    
    public static void invokePrefixMethod(ActionInvocation actionInvocation, String[] prefixes) throws InvocationTargetException, IllegalAccessException {
    	//获取action实例
		Object action = actionInvocation.getAction();
		//获取要调用的action方法的名字
		String methodName = actionInvocation.getProxy().getMethod();
		
		if (methodName == null) {
			// if null returns (possible according to the docs), use the default execute 
	        methodName = DEFAULT_INVOCATION_METHODNAME;//execute
		}
		
		//获取前缀方法
		Method method = getPrefixedMethod(prefixes, methodName, action);
		if (method != null) {
			//若方法不为null， 则通过反射调用前缀方法。
			method.invoke(action, new Object[0]);
		}
	}
	
	//Method method = getPrefixedMethod(prefixes, methodName, action);
	public static Method getPrefixedMethod(String[] prefixes, String methodName, Object action) {
		assert(prefixes != null);
		//把方法的首字母变为大写
		String capitalizedMethodName = capitalizeMethodName(methodName);
		//遍历前缀数组
        for (String prefixe : prefixes) {
        	//通过拼接的方式，得到前缀方法名，第一次为prepare+方法名， 第二次为prepareDo+方法名
            String prefixedMethodName = prefixe + capitalizedMethodName;
            try {
            	//利用反射获取从action中获取对应的方法，若有直接返回，并结束循环。
                return action.getClass().getMethod(prefixedMethodName, EMPTY_CLASS_ARRAY);
            }
            catch (NoSuchMethodException e) {
                // hmm -- OK, try next prefix
                if (LOG.isDebugEnabled()) {
                    LOG.debug("cannot find method [#0] in action [#1]", prefixedMethodName, action.toString());
                }
            }
        }
		return null;
	}
	
如何在配置文件中为拦截器栈的属性赋值？
	
	
	